#!/usr/bin/env bash

# fail fast
set -eo pipefail

# Save current umask and ensure we don't change global permissions
ORIGINAL_UMASK=$(umask)
umask 0022

start_time=$(date +%s%N)

# debug
# set -x

# Cleanup function to restore umask
function cleanup() {
  umask "$ORIGINAL_UMASK"
}

# Ensure cleanup runs on exit
trap cleanup EXIT

# Ensure we don't modify global filesystem permissions
# This check will help diagnose permission issues early

function error() {
  echo " !     $*" >&2
  exit 1
}

function topic() {
  echo "-----> $*"
}

function indent() {
  c='s/^/       /'
  
  if [ -t 0 ]; then
    # If there is an argument (no pipe)
    echo "$1" | sed "$c"
  else
    # If input is being piped
    case $(uname) in
      Darwin) sed -l "$c";;
      *)      sed -u "$c";;
    esac
  fi
}


layers_dir="$CNB_LAYERS_DIR"
env_dir="$CNB_PLATFORM_DIR/env"

if compgen -G "${env_dir}/*" > /dev/null; then
  for var in "${env_dir}"/*; do
    declare "$(basename "${var}")=$(<"${var}")"
  done
fi

topic "Installing Aptfile packages."

apt_layer=$layers_dir/apt
# Ensure we're working within the assigned layer directory
if [ -z "$layers_dir" ] || [ ! -d "$layers_dir" ]; then
  error "CNB_LAYERS_DIR is not set or does not exist"
fi

mkdir -p "$apt_layer"
# Ensure apt_layer has proper permissions
chmod 755 "$apt_layer"

# Define exports_path here so it's available in all code paths
exports_path=$apt_layer/exec.d/000_apt.sh

# Store which STACK we are running on in the cache to bust the cache if it changes
if [ -f "${apt_layer}.toml" ]; then
  CACHED_STACK=$(sed -n 's/.*stack\s*=\s*"\([^"]*\)".*/\1/p' ${apt_layer}.toml)
  indent "Found cached ${apt_layer}.toml: ${CACHED_STACK}"
else
  CACHED_STACK=""
  indent "No cached ${apt_layer}.toml found"
fi

APT_CACHE_DIR="$apt_layer/cache"
APT_STATE_DIR="$apt_layer/state"
APT_SOURCELIST_DIR="$apt_layer/sources"   # place custom sources.list here
APT_SOURCES="$APT_SOURCELIST_DIR/sources.list"
APT_VERSION=$(apt-get -v | awk 'NR == 1{ print $2 }')

case "$APT_VERSION" in
  0* | 1.0*) APT_FORCE_YES="--force-yes";;
  *)         APT_FORCE_YES="--allow-downgrades --allow-remove-essential --allow-change-held-packages";;
esac

if [ -f "$apt_layer/Aptfile" ] && cmp -s Aptfile "$apt_layer/Aptfile" && [[ $CACHED_STACK == "$CNB_STACK_ID" ]] ; then
  topic "Aptfile and stack look the same, reusing cache"
else
  # Aptfile changed or does not exist or STACK changed
  topic "Detected Aptfile or stack change, flushing cache"
  rm -rf "$APT_CACHE_DIR"
  mkdir -p "$APT_CACHE_DIR/archives/partial"
  mkdir -p "$APT_STATE_DIR/lists/partial"
  mkdir -p "$APT_SOURCELIST_DIR"   # make dir for sources
  cp -f Aptfile "$apt_layer"/Aptfile
  cat "/etc/apt/sources.list" > "$APT_SOURCES"    # no cp here
  # add custom repositories from Aptfile to sources.list
  # like>>    :repo:deb http://cz.archive.ubuntu.com/ubuntu artful main universe
  if grep -q -e "^:repo:" Aptfile; then
    indent "Adding custom repositories"
    cat Aptfile | grep -s -e "^:repo:" | sed 's/^:repo:\(.*\)\s*$/\1/g' >> "$APT_SOURCES"
  fi

  APT_OPTIONS="-o debug::nolocking=true -o dir::cache=$APT_CACHE_DIR -o dir::state=$APT_STATE_DIR"
  APT_OPTIONS="$APT_OPTIONS -o dir::etc::sourcelist=$APT_SOURCES -o dir::etc::sourceparts=/dev/null"
  APT_OPTIONS="$APT_OPTIONS -o Acquire::Retries=3" # Try thrice to reach the repositories

  indent "Updating apt caches"
  # Ignore stderr from apt-get update containing: rm: cannot remove '/var/cache/apt/archives/partial/*.deb': Permission denied
  apt-get $APT_OPTIONS update 2> >(grep -v "rm: cannot remove") | indent

  for PACKAGE in $(cat Aptfile | grep -v -s -e '^#' | grep -v -s -e "^:repo:"); do
    if [[ $PACKAGE == *deb ]]; then
      PACKAGE_NAME=$(basename "$PACKAGE" .deb)
      PACKAGE_FILE=$APT_CACHE_DIR/archives/$PACKAGE_NAME.deb

      indent "Fetching $PACKAGE"
      curl --silent --show-error --fail -L -z "$PACKAGE_FILE" -o "$PACKAGE_FILE" "$PACKAGE" 2>&1 | indent
    else
      indent "Fetching .debs for $PACKAGE"
      apt-get $APT_OPTIONS -y $APT_FORCE_YES -d install --reinstall "$PACKAGE" | indent
    fi
  done

  indent "Installing apt packages with dpkg"
  for DEB in $(ls -1 $APT_CACHE_DIR/archives/*.deb); do
    indent "Installing $(basename $DEB)"
    basename "$DEB" | indent
    # Extract to temp dir first to avoid permission issues
    TEMP_EXTRACT_DIR=$(mktemp -d)
    dpkg -x "$DEB" "$TEMP_EXTRACT_DIR"
    
    # Copy only the contents we need, avoiding system directories
    # This prevents packages from modifying /cnb or other system paths
    # Use --no-dereference to avoid following symlinks that might point outside
    if [ -d "$TEMP_EXTRACT_DIR/usr" ]; then
      mkdir -p "$apt_layer/usr"
      cp -rp --no-dereference "$TEMP_EXTRACT_DIR/usr"/* "$apt_layer/usr/" 2>/dev/null || true
    fi
    if [ -d "$TEMP_EXTRACT_DIR/lib" ]; then
      mkdir -p "$apt_layer/lib"
      cp -rp --no-dereference "$TEMP_EXTRACT_DIR/lib"/* "$apt_layer/lib/" 2>/dev/null || true
    fi
    if [ -d "$TEMP_EXTRACT_DIR/lib64" ]; then
      mkdir -p "$apt_layer/lib64"
      cp -rp --no-dereference "$TEMP_EXTRACT_DIR/lib64"/* "$apt_layer/lib64/" 2>/dev/null || true
    fi
    if [ -d "$TEMP_EXTRACT_DIR/opt" ]; then
      mkdir -p "$apt_layer/opt"
      cp -rp --no-dereference "$TEMP_EXTRACT_DIR/opt"/* "$apt_layer/opt/" 2>/dev/null || true
    fi
    if [ -d "$TEMP_EXTRACT_DIR/etc" ]; then
      mkdir -p "$apt_layer/etc"
      cp -rp --no-dereference "$TEMP_EXTRACT_DIR/etc"/* "$apt_layer/etc/" 2>/dev/null || true
    fi
    if [ -d "$TEMP_EXTRACT_DIR/sbin" ]; then
      mkdir -p "$apt_layer/sbin"
      cp -rp --no-dereference "$TEMP_EXTRACT_DIR/sbin"/* "$apt_layer/sbin/" 2>/dev/null || true
    fi
    if [ -d "$TEMP_EXTRACT_DIR/bin" ]; then
      mkdir -p "$apt_layer/bin"
      cp -rp --no-dereference "$TEMP_EXTRACT_DIR/bin"/* "$apt_layer/bin/" 2>/dev/null || true
    fi
    
    # Clean up temp directory
    rm -rf "$TEMP_EXTRACT_DIR"
  done

  indent "Writing exec.d script and environment variables"

  mkdir -p "$apt_layer/exec.d"
  touch "$exports_path"
  chmod 755 "$exports_path"
  cat << EOF > "$exports_path"
#!/usr/bin/env bash
set -eo pipefail

echo "Loading apt package environment variables"

cat << EOF >&3
EOF

  apt_env_dir=$apt_layer/env
  mkdir -p "$apt_env_dir"

  path="$apt_layer/usr/bin:$apt_layer/usr/sbin:$apt_layer/bin:$apt_layer/sbin"
  echo "PATH=$path" | indent
  echo "PATH = \"$path:\$PATH\"" >> "$exports_path"
  echo -n "$path:$PATH" > "$apt_env_dir/PATH.prepend"
  echo -n ":" > "$apt_env_dir/PATH.delim"

  ld_library_path=$apt_layer/lib/x86_64-linux-gnu:$apt_layer/lib/i386-linux-gnu:$apt_layer/lib:$apt_layer/usr/lib/x86_64-linux-gnu:$apt_layer/usr/lib/i386-linux-gnu:$apt_layer/usr/lib
  echo "LD_LIBRARY_PATH=$ld_library_path" | indent
  echo "LD_LIBRARY_PATH = \"$ld_library_path:\$LD_LIBRARY_PATH\"" >> "$exports_path"
  echo -n "$ld_library_path" > "$apt_env_dir/LD_LIBRARY_PATH.prepend"
  echo -n ":" > "$apt_env_dir/LD_LIBRARY_PATH.delim"

  library_path=$ld_library_path
  echo "LIBRARY_PATH=$library_path" | indent
  echo "LIBRARY_PATH = \"$library_path:\$LIBRARY_PATH\"" >> "$exports_path"
  echo -n "$library_path" > "$apt_env_dir/LIBRARY_PATH.prepend"
  echo -n ":" > "$apt_env_dir/LIBRARY_PATH.delim"

  include_path=$apt_layer/usr/include:$apt_layer/usr/include/x86_64-linux-gnu
  echo "INCLUDE_PATH=$include_path" | indent
  echo "INCLUDE_PATH = \"$include_path:\$INCLUDE_PATH\"" >> "$exports_path"
  echo -n "$include_path" > "$apt_env_dir/INCLUDE_PATH.prepend"
  echo -n ":" > "$apt_env_dir/INCLUDE_PATH.delim"

  cpath="\$INCLUDE_PATH"
  echo "CPATH=$cpath" | indent
  echo "CPATH = \"$cpath\"" >> "$exports_path"
  cp "$apt_env_dir"/INCLUDE_PATH.prepend "$apt_env_dir"/CPATH.prepend
  echo -n ":" > "$apt_env_dir/CPATH.delim"

  cpppath="\$INCLUDE_PATH"
  echo "CPPPATH=$cpppath" | indent
  echo "CPPPATH = \"$cpppath\"" >> "$exports_path"
  cp "$apt_env_dir"/INCLUDE_PATH.prepend "$apt_env_dir"/CPPPATH.prepend
  echo -n ":" > "$apt_env_dir/CPPPATH.delim"

  pkg_config_path=$apt_layer/usr/lib/x86_64-linux-gnu/pkgconfig:$apt_layer/usr/lib/i386-linux-gnu/pkgconfig:$apt_layer/usr/lib/pkgconfig
  echo "PKG_CONFIG_PATH=$pkg_config_path" | indent
  echo "PKG_CONFIG_PATH = \"$pkg_config_path:\$PKG_CONFIG_PATH\"" >> "$exports_path"
  echo -n "$pkg_config_path" > "$apt_env_dir/PKG_CONFIG_PATH.prepend"
  echo -n ":" > "$apt_env_dir/PKG_CONFIG_PATH.delim"

  gi_typelib_path=$apt_layer/usr/lib/x86_64-linux-gnu/girepository-1.0:$apt_layer/usr/lib/i386-linux-gnu/girepository-1.0
  echo "GI_TYPELIB_PATH=$gi_typelib_path" | indent
  echo "GI_TYPELIB_PATH = \"$gi_typelib_path:\$GI_TYPELIB_PATH\"" >> "$exports_path"
  echo -n "$gi_typelib_path" > "$apt_env_dir/GI_TYPELIB_PATH.prepend"
  echo -n ":" > "$apt_env_dir/GI_TYPELIB_PATH.delim"

  echo 'EOF' >> "$exports_path"
  echo '' >> "$exports_path"
fi

# Write the cache-aware layer TOML file
cat << EOF > "${apt_layer}.toml"
[types]
launch = true
build = true
cache = true

[metadata]
stack = "${CNB_STACK_ID}"
buildpack_id = "${BUILDPACK_ID:-io.build.github.buildio.buildpack-apt}"
buildpack_version = "${BUILDPACK_VERSION:-0.0.18}"
EOF

# echo "--- ${apt_layer}.toml ---"
# cat "${apt_layer}.toml"

# sleep 10

end_time=$(date +%s%N)
indent "Elapsed time: $(( $(( end_time - start_time )) / 1000000 ))ms"
